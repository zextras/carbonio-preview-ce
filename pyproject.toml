# SPDX-FileCopyrightText: 2022 Zextras <https://www.zextras.com
#
# SPDX-License-Identifier: AGPL-3.0-only

# Global options for static analysis:

[tool.mypy]
python_version = "3.11"
plugins = [
    "returns.contrib.mypy.returns_plugin",
    "pydantic.mypy",
]
# follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true
warn_return_any = true
warn_unused_configs = true

# This at false, otherwise it will flag every generic obj like dict
disallow_any_generics = false

# for strict mypy: (this is the tricky one :-))
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# Per-module options:

[[tool.mypy.overrides]]
module = [
    "pypdfium2"
]
ignore_missing_imports = true

[tool.ruff]
# Always generate Python 3.8-compatible code.
target-version = "py38"

# https://beta.ruff.rs/docs/rules/
select = [
    "E",    # pycodestyle (`E`)
    "F",    # Pyflakes (`F`)
    "C901", # McCabe complexity (`C901`)
    "W",    # pycodestyle warnings (`W`)
    "B",    # flake8-bugbear (`B`)
    "I001", # isort (sort import for type and alphanumerically),
    "N",    # pep8 naming
    "UP",   # pyupgrade
    "ANN",  # flake8 annotations
    "ASYNC",# flake8 async
    "S",    # bandit
    "FBT",  # boolean trap
    "A",    # flake8 shadowing builtins
    "COM",  # missing or extra commas
    "C4",   # flake8 comprehension
    "EM",   # better error messages check
    "G",    # logging format
    "INP",  # remove implicit namespace package
    "PIE",  # flake8 pie, unecessary statements or duplicates
    "T20",  # removes prints
    "PYI",  # Specializations for type hinting stub files
    "Q",    # quotes lint
    "RSE",  # raise linter uneccessary parenthesis
    "RET",  # return statement
    "SLF",  # accessing private members
    "SIM",  # simplifies code
    "TCH",  # type check
    "ARG",  # unused arguments
    "PTH",  # use Path insead of os library
    "TD",   # rules on how to write todos
    "FIX",  # for fixmes
    "ERA",  # removes commented code
    "PLE",
    "PLR",
    "PLW",
    "TRY",  # prevents error handling antipatterns
    "FLY",
    "PERF", # check for performance antipatterns
    "RUF",  # ruff rules
]
ignore = [
    "ANN401",   # dynamically typed expression
    "PLR0913",  # too many arguments to function call T0REMOVE
    "B008",     # do not perform function calls Depends
    "G004",     # logging using f string (should be refactored)
    "TRY400",   # logging exception with other levels
    "FBT001",   # boolean positional arg in function
    "FBT002",   # boolean values in function
    "A002",     # it would break API fixing, shadowing builtin
    "A003",     # it would break API fiing, shadowing builtin
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
fix = true
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "gunicorn.conf.py",
    "tests"
]
per-file-ignores = {}

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.pep8-naming]
# Allow Pydantic's `@field_validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.field_validator"]